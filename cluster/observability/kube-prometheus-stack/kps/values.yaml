kube-prometheus-stack:
  crds:
    enabled: false
  fullnameOverride: kps
  alertmanager:
    externalUrl: https://alertmanager.k8s.devmem.ru
    fullnameOverride: alertmanager
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 100Mi
      useExistingSecret: true
      configSecret: alertmanager-config
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - &host alertmanager.k8s.devmem.ru
      tls:
        - hosts:
            - *host
          secretName: null
  grafana:
    fullnameOverride: grafana
    defaultDashboardsTimezone: Europe/Moscow
    persistence:
      enabled: true
      type: sts
      storageClassName: longhorn
      size: 1Gi
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - &host grafana.devmem.ru
      tls:
        - hosts:
            - *host
          secretName: null
    sidecar:
      datasources:
        enabled: true
        searchNamespace: ALL
        isDefaultDatasource: false
      dashboards:
        enabled: true
        searchNamespace: ALL
        folderAnnotation: grafana_folder
        provider:
          foldersFromFilesStructure: true
          disableDeletion: true
          allowUiUpdates: true
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: "default"
            orgId: 1
            folder: ""
            type: file
            disableDeletion: true
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        longhorn:
          url: https://grafana.com/api/dashboards/13032/revisions/6/download
          datasource: Prometheus
        node-exporter-full:
          url: https://grafana.com/api/dashboards/1860/revisions/37/download
          datasource: Prometheus
        ingress-nginx:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/grafana/dashboards/nginx.json
          datasource: Prometheus
        ingress-nginx-request-handling-performance:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/grafana/dashboards/request-handling-performance.json
          datasource: Prometheus
        ingress-nginx-nextgen:
          url: https://grafana.com/api/dashboards/14314/revisions/2/download
          datasource: Prometheus
        ingress-nginx-loki:
          url: https://grafana.com/api/dashboards/12559/revisions/11/download
        argocd:
          url: https://raw.githubusercontent.com/argoproj/argo-cd/master/examples/dashboard.json
    grafana.ini:
      analytics:
        check_for_updates: false
      server:
        root_url: https://grafana.devmem.ru
        enable_gzip: true
      auth.ldap:
        enabled: true
        allow_sign_up: true
        config_file: /etc/grafana/ldap.toml
    ldap:
      enabled: true
      existingSecret: grafana
    admin:
      existingSecret: grafana
    envFromSecret: grafana-smtp
  prometheus:
    fullnameOverride: prometheus
    thanosService:
      enabled: true
    thanosServiceMonitor:
      enabled: true
    prometheusSpec:
      externalUrl: https://prometheus.k8s.devmem.ru
      replicaExternalLabelName: replica
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      enableAdminAPI: true
      retention: 2d
      retentionSize: "4GB"
      thanos:
        image: quay.io/thanos/thanos:v0.39.2
        objectStorageConfig:
          existingSecret:
            name: thanos-objstore
            key: objstore.yml
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 5Gi
      additionalScrapeConfigs:
        - job_name: consul-sd
          scheme: https
          consul_sd_configs:
            - server: consul-server.consul:8500
              scheme: http
              tags:
                - metrics
          relabel_configs:
            - source_labels: [__meta_consul_service]
              target_label: job
            - source_labels: [__meta_consul_tags]
              regex: .*,metrics_path=([^,]+),.*
              replacement: $1
              target_label: __metrics_path__
            - source_labels: [__meta_consul_tags]
              regex: .*,metrics_scheme=([^,]+),.*
              replacement: $1
              target_label: __scheme__
        - job_name: blackbox-kubernetes-ingresses
          scrape_timeout: 15s
          metrics_path: /probe
          params:
            module: [http_2xx]
          kubernetes_sd_configs:
            - role: ingress
          relabel_configs:
            - source_labels:
                - __meta_kubernetes_ingress_scheme
                - __address__
                - __meta_kubernetes_ingress_path
              regex: (.+);(.+);(.+)
              replacement: ${1}://${2}${3}
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox-exporter:9115
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_ingress_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_ingress_name]
              target_label: kubernetes_name
            - source_labels: [__meta_kubernetes_ingress_annotation_nginx_ingress_kubernetes_io_auth_url]
              regex: .*oauth2-proxy.*
              action: drop
            - source_labels: [__meta_kubernetes_ingress_label_app]
              regex: oauth2-proxy
              action: drop
            - source_labels: [__meta_kubernetes_ingress_name]
              regex: (dex|loki|reverse-proxy-minio|reverse-proxy-jenkins)
              action: drop
        - job_name: blackbox-static
          scrape_timeout: 15s
          metrics_path: /probe
          params:
            module: [http_2xx]
          static_configs:
            - targets: [192.168.20.45]
              labels:
                app: zhabridge
            - targets: [192.168.20.48]
              labels:
                app: esphome
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - source_labels: [__param_target]
              target_label: instance
            - target_label: __address__
              replacement: blackbox-exporter:9115
        - job_name: openwrt-node-exporter
          static_configs:
            - targets:
                - 192.168.10.99:9100
                - 192.168.20.99:9100
                # - 192.168.40.1:8080
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - &host prometheus.k8s.devmem.ru
      tls:
        - hosts:
            - *host
          secretName: null
  prometheusOperator:
    fullnameOverride: prometheus-operator
  prometheus-node-exporter:
    fullnameOverride: node-exporter
  kube-state-metrics:
    fullnameOverride: kube-state-metrics
  kubeEtcd:
    service:
      port: 2381
      targetPort: 2381
prometheus-blackbox-exporter:
  fullnameOverride: blackbox-exporter
  config:
    modules:
      http_2xx:
        prober: http
        timeout: 10s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          follow_redirects: true
          preferred_ip_protocol: "ip4"
      icmp:
        prober: icmp
        timeout: 10s
        icmp:
          preferred_ip_protocol: "ip4"
  ingress:
    enabled: true
    className: nginx
    hosts:
      - host: &host blackbox-exporter.k8s.devmem.ru
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - *host
        secretName: null
  serviceMonitor:
    selfMonitor:
      enabled: true
  prometheusRule:
    enabled: true
    rules:
      - alert: BlackboxProbeFailed
        expr: |-
          probe_success == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Blackbox probe failed.
          description: The host {{ $labels.instance }} is currently unreachable.
      - alert: BlackboxSlowProbe
        expr: |-
          avg_over_time(probe_duration_seconds[5m]) > 2
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Blackbox slow probe.
          description: Blackbox probe on {{ $labels.instance }} took more than 1s to complete.
      - alert: BlackboxSslCertExpiringSoon
        expr: |-
          probe_ssl_earliest_cert_expiry - time() < 86400 * 3
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: SSL certificate is about to expire.
          description: SSL certificate for {{ $labels.instance }} will expire in less than 3 days.
      - alert: BlackboxSslCertExpired
        expr: |-
          probe_ssl_earliest_cert_expiry - time() <= 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: SSL certificate has expired.
          description: SSL certificate for {{ $labels.instance }} has expired.
